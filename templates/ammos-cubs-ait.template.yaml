Parameters:
  ProjectName:
    Description: Name of your project
    Type: String
  ConfigBucketName:
    Description: Name of the S3 bucket used to store project-specific configuration
      files.
    Type: String
  FQDN:
    Description: Fully Qualified Domain Name to use for project resources root.
    Type: String
  PrivateSubnetIds:
    Description: List of Private Subnet IDs for deploying the AIT Autoscaling Group
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VPC ID for deploying project resources
    Type: AWS::EC2::VPC::Id
  InstanceType:
    Description: Instance type to be used for AIT Server instances; see deployment
      guide for recommendations
    Type: String
  SshKeyName:
    Description: Name of created SSH Key for instance access - must use SSM sessions
      if no key supplied
    Type: AWS::EC2::KeyPair::KeyName
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: The Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a 
      hyphen (-).
    Default: aws-quickstart
    Description: Name of the S3 bucket for your copy of the Quick Start assets. 
      Keep the default name unless you are customizing the template. 
      Changing the name updates code references to point to a new Quick 
      Start location. This name can include numbers, lowercase letters, 
      uppercase letters, and hyphens, but do not start or end with a hyphen (-). 
      See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^([0-9a-zA-Z-.]+/)*$
    ConstraintDescription: The Quick Start S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slashes (/).
    Default: quickstart-linux-bastion/
    Description: S3 key prefix that is used to simulate a directory for your copy of the 
      Quick Start assets. Keep the default prefix unless you are customizing 
      the template. Changing this prefix updates code references to point to 
      a new Quick Start location. This prefix can include numbers, lowercase 
      letters, uppercase letters, hyphens (-), and forward slashes (/). End with a forward slash. 
      See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html 
      and https://aws-quickstart.github.io/option1.html.
    Type: String
Conditions:
  SshEnabled: !Not
    - !Equals
      - ''
      - !Ref 'SshKeyName'
Mappings:
  AWSAMIRegionMap:
    us-east-1:
      RHEL76HVM: example
    us-east-2:
      RHEL76HVM: example
    us-west-1:
      RHEL76HVM: example      
    us-west-2:
      RHEL76HVM: example
Resources:
  AitServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to manage connections to ammos-ait-asg-deploy
        AIT Server
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${ProjectName}-AlbSecurityGroupId
        - IpProtocol: tcp
          FromPort: 8082
          ToPort: 8082
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${ProjectName}-AlbSecurityGroupId
      VpcId: !Ref 'VpcId'
  AitAutoScalingGroupInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'InstanceRole'
  AitAutoScalingGroupLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - InstanceRoleDefaultPolicy
      - InstanceRole
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: 
            - !Ref InstanceRole
          buckets:
            - !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      AWS::CloudFormation::Init:
        configSets:
          default:
            - download_bootstrap_script
        download_bootstrap_script:
          files:
            /tmp/molecule_install.sh:
              source: !Sub
                - https://${S3Bucket}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/ait_bootstrap.sh
                - S3Bucket: !If
                    - UsingDefaultBucket
                    - !Sub 'aws-quickstart-${AWS::Region}'
                    - !Ref 'QSS3BucketName'
                  S3Region: !If
                    - UsingDefaultBucket
                    - !Ref 'AWS::Region'
                    - !Ref 'QSS3BucketRegion'
              mode: '000550'
              owner: 'root'
              group: 'root'
              authentication: S3AccessCreds

    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 64
      IamInstanceProfile: !Ref 'AitAutoScalingGroupInstanceProfile'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - RHEL76HVM
      InstanceType: !Ref 'InstanceType'
      KeyName: !If
        - SshEnabled
        - !Ref 'SshKeyName'
        - !Ref 'AWS::NoValue'
      SecurityGroups:
        - !GetAtt 'AitServerSecurityGroup.GroupId'
     UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          if [ $UID -eq 0 ]; then
            sudo chmod 777 "$0"
            exec su ec2-user "$0"
          fi
          export PATH=$PATH:/usr/local/bin
          sudo yum install git -y || apt-get install -y git || zypper -n install git
          sudo git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git /quickstart-linux-utilities
          cd /quickstart-linux-utilities
          source quickstart-cfn-tools.source
          qs_update-os
          qs_aws-cfn-bootstrap
          sudo cfn-init -v --stack ${AWS::StackName} --resource AitAutoScalingGroupLaunchConfig --region ${AWS::Region}
          sudo cfn-signal -e $? --stack ${AWS::StackName} --resource AitAutoScalingGroup --region ${AWS::Region}
  AitWebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref 'VpcId'
  AitMctTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8082
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref 'VpcId'
  AitAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT1H
    Properties:
      LaunchConfigurationName: !Ref 'AitAutoScalingGroupLaunchConfig'
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: ammos-cubs-deploy/ammos-ait-asg-deploy/AitAutoScalingGroup
      TargetGroupARNs:
        - !Ref 'AitWebTargetGroup'
        - !Ref 'AitMctTargetGroup'
      VPCZoneIdentifier: !Ref 'PrivateSubnetIds'
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
  AitListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'AitWebTargetGroup'
          Type: forward
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'ait.${FQDN}'
      ListenerArn: !ImportValue
        Fn::Sub: ${ProjectName}-HttpsListenerArn
      Priority: 75
  MctListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'AitMctTargetGroup'
          Type: forward
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'mct.${FQDN}'
      ListenerArn: !ImportValue
        Fn::Sub: ${ProjectName}-HttpsListenerArn
      Priority: 100
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: '2012-10-17'
      Description: IAM Role to be used by the AIT Application Servers
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /am-ec2/
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/Security_Boundary_NoIAM'
  InstanceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: cloudformation:SignalResource
            Effect: Allow
            Resource: !Ref 'AWS::StackId'
          - Action:
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:GetObjectVersion
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Ref 'ConfigBucketName'
              - !Sub '${ConfigBucketName}/*'
          - Action:
              - 's3:GetObject'
            Resource: !Sub
              - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
              - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
            Effect: Allow
        Version: '2012-10-17'
      PolicyName: InstanceRoleDefaultPolicy
      Roles:
        - !Ref 'InstanceRole'
Outputs:
  AitSecurityGroupId:
    Value: !GetAtt 'AitServerSecurityGroup.GroupId'
