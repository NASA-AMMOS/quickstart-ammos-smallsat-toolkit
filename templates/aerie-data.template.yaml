AWSTemplateFormatVersion: "2010-09-09"

Description: EFS Configuration for Aerie Deployment

Parameters:
  ProjectName:
    Default: ammos-aerie
    Description: Name of stack
    Type: String
  VpcId:
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1AID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1BID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1CID:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  SshKey:
    Description: SSH Key for accessing the Bastion Server
    Type: AWS::EC2::KeyPair::KeyName
    Default: ammos-cloud-aerie
  IamRoleName:
    Description: Name of the Role to attach to the EFS Bastion server
    Type: String
  Ami:
    Description: AMI ID for the Bastion Server
    Type: AWS::EC2::Image::Id
    Default: ami-01ee1e88c04465cc2
  EnableBackups:
    Description: Will enable AWS Backups for EFS if "true" (default), or skip if "false"
    Type: String
    Default: "true"
    AllowedValues: ["false", "true"]
  ScheduleExpression:
    Type: String
    Default: "cron(0 12 * * ? *)"
  StartWindowMinutes:
    Type: Number
    Default: 60
  CompletionWindowMinutes:
    Type: Number
    Default: 120
  MoveToColdStorageAfterDays:
    Type: Number
    Default: 30
  DeleteAfterDays:
    Type: Number
    Default: 120

Conditions:
  EnableBackup: !Equals [!Ref EnableBackups, "true"]

Resources:
  EfsBackupVault:
    Condition: EnableBackup
    Type: "AWS::Backup::BackupVault"
    Properties:
      BackupVaultName: !Sub "${ProjectName}-EfsBackupVault"

  EfsBackupPlan:
    Condition: EnableBackup
    Type: "AWS::Backup::BackupPlan"
    Properties:
      BackupPlan:
        BackupPlanName: !Sub "${ProjectName}-EfsBackupPlan"
        BackupPlanRule:
          - RuleName: EfsBackupRule
            TargetBackupVault: !Ref EfsBackupVault
            ScheduleExpression: !Ref ScheduleExpression
            StartWindowMinutes: !Ref StartWindowMinutes
            CompletionWindowMinutes: !Ref CompletionWindowMinutes
            Lifecycle:
              MoveToColdStorageAfterDays: !Ref MoveToColdStorageAfterDays
              DeleteAfterDays: !Ref DeleteAfterDays
    DependsOn: EfsBackupVault

  BackupRole:
    Condition: EnableBackup
    Type: Custom::JplRole
    Properties:
      Description: !Sub Role to create EFS Backup - ${ProjectName}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "backup.amazonaws.com"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"
      Path: /account-managed/

  EfsBackupSelection:
    Condition: EnableBackup
    Type: "AWS::Backup::BackupSelection"
    Properties:
      BackupPlanId: !Ref EfsBackupPlan
      BackupSelection:
        SelectionName: "EfsBackupSelection"
        IamRoleArn: !GetAtt BackupRole.Arn
        ListOfTags:
          - ConditionType: STRINGEQUALS
            ConditionKey: backupplan
            ConditionValue: efs-backup-plan
    DependsOn:
      - BackupRole
      - EfsBackupPlan

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Allow SSH to EC2 Bastion Server

  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VpcId
      GroupDescription: "EFS Security Group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 10.133.0.0/16 # JPL Network 1 nfs
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 128.149.0.0/16 # JPL Network 2 nfs
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 137.78.0.0/16 # JPL Network 3 nfs
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 137.79.0.0/16 # JPL Network 4 nfs
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref BastionSecurityGroup

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      BackupPolicy:
        Status: DISABLED
      FileSystemTags:
        - Key: Name
          Value: aerie-efs
        - Key: backupplan
          Value: efs-backup-plan

  MountTargetPrivateA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet1AID
      SecurityGroups: [!Ref EfsSecurityGroup]
  MountTargetPrivateB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet1BID
      SecurityGroups: [!Ref EfsSecurityGroup]
  MountTargetPrivateC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet1CID
      SecurityGroups: [!Ref EfsSecurityGroup]

  RootAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId:
        Ref: FileSystem
      PosixUser:
        Uid: "1001"
        Gid: "1001"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1001"
          OwnerUid: "1001"
          Permissions: "777"
        Path: "/efs"

  AerieFilestoreAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      RootDirectory:
        CreationInfo:
          OwnerUid: "1001"
          OwnerGid: "1001"
          Permissions: "777"
        Path: /efs/aerie
      FileSystemId: !Ref FileSystem

  PostgresInitAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      RootDirectory:
        CreationInfo:
          OwnerUid: "1001"
          OwnerGid: "1001"
          Permissions: "777"
        Path: /efs/init_postgres
      FileSystemId: !Ref FileSystem

  HasuraInitAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      RootDirectory:
        CreationInfo:
          OwnerUid: "1001"
          OwnerGid: "1001"
          Permissions: "777"
        Path: /efs/init_hasura
      FileSystemId: !Ref FileSystem

  PostgresDataAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      RootDirectory:
        CreationInfo:
          OwnerUid: "1001"
          OwnerGid: "1001"
          Permissions: "777"
        Path: /efs/postgres
      FileSystemId: !Ref FileSystem

  CommandingInitAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      RootDirectory:
        CreationInfo:
          OwnerUid: "1001"
          OwnerGid: "1001"
          Permissions: "777"
        Path: /efs/init_commanding
      FileSystemId: !Ref FileSystem

  BastionProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IamRoleName
      Path: /account-managed/

  BastionServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ami
      InstanceType: t3.small
      KeyName: !Ref SshKey
      IamInstanceProfile: !Ref BastionProfile
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet1ID
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          function exitTrap(){
          exitCode=$?
          /opt/aws/bin/cfn-signal \
          --stack ${AWS::StackName} \
          --resource AitAutoScalingGroup \
          --region ${AWS::Region} -e $exitCode || echo 'Failed to send Cloudformation Signal'
          }
          trap exitTrap EXIT

          function boostrap_aws_stuff(){
            # rpms and stuff
            yum install -y -q python3 wget unzip
            wget -nv https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            wget -nv https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
            curl  "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o  "awscliv2.zip"
            pip3 install aws-cfn-bootstrap-py3-latest.tar.gz

            # Cloudwatch and SSM agent
            sudo rpm -U ./amazon-cloudwatch-agent.rpm
            yum install -y -q https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

            # AWS CLI
            unzip -qq awscliv2.zip
            ./aws/install > /dev/null && echo "Installed AWS CLI"
          }

          function boostrap_efs(){
            yum update -y
            yum install -y curl nfs-common amazon-efs-utils
            pip3 install botocore
            DIR_TGT=/mnt/efs/
            EC2_REGION=${AWS::Region}
            EFS_FILE_SYSTEM_ID=${FileSystem}
            mkdir -p $DIR_TGT
            DIR_SRC=$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com
            echo "Mounting $EFS_FILE_SYSTEM_ID via ${RootAccessPoint}"
            mount -t efs -o tls,accesspoint=${RootAccessPoint} $EFS_FILE_SYSTEM_ID:/ $DIR_TGT
          }

          boostrap_aws_stuff
          boostrap_efs

Outputs:
  EfsLambdaMountTarget:
    Description: "Mount target for lambda function"
    Value: !Ref MountTargetPrivateA
  AerieFileSystemId:
    Description: "Filesystem-ID for EFS"
    Value: !GetAtt FileSystem.FileSystemId
  AerieFileSystemArn:
    Description: "ARN for EFS Filesystem"
    Value: !GetAtt FileSystem.Arn

  # ==================== EFS Acess Points ==================== #
  # Root
  EfsRootAccessPointArn:
    Description: "Access Point for EFS Root Path (ARN)"
    Value: !GetAtt RootAccessPoint.Arn
    Export:
      Name: !Sub "${ProjectName}-EfsRootAccessPointArn"
  EfsRootAccessPointId:
    Description: "Access Point for EFS Root Path (FS ID)"
    Value: !Ref RootAccessPoint
  # Aerie Filestore
  AerieFilestoreAccessPointId:
    Description: Access Point for AerieFilestore AccessPoint
    Value: !Ref AerieFilestoreAccessPoint
  AerieFilestoreAccessPointArn:
    Description: Access Point for AerieFilestore AccessPoint
    Value: !GetAtt AerieFilestoreAccessPoint.Arn
  # Postgres Data
  PostgresDataAccessPointId:
    Description: Access Point for PostgresData AccessPoint
    Value: !Ref PostgresDataAccessPoint
  PostgresDataAccessPointArn:
    Description: Access Point for PostgresData AccessPoint
    Value: !GetAtt PostgresDataAccessPoint.Arn
  # Postgres Init
  PostgresInitAccessPointId:
    Description: Access Point for PostgresInit AccessPoint
    Value: !Ref PostgresInitAccessPoint
  PostgresInitAccessPointArn:
    Description: Access Point for PostgresInitAccessPoint
    Value: !GetAtt PostgresInitAccessPoint.Arn
  # Hasura Init
  HasuraInitAccessPointId:
    Description: Access Point for HasuraInit AccessPoint
    Value: !Ref HasuraInitAccessPoint
  HasuraInitAccessPointArn:
    Description: Access Point for HasuraInit AccessPoint
    Value: !GetAtt HasuraInitAccessPoint.Arn

  # Commanding Init
  CommandingInitAccessPointId:
    Description: Access Point for CommandingInit AccessPoint
    Value: !Ref CommandingInitAccessPoint
  CommandingInitAccessPointArn:
    Description: Access Point for CommandingInit AccessPoint
    Value: !GetAtt CommandingInitAccessPoint.Arn

  EfsSecurityGroupId:
    Description: "Security group ID for lambda function"
    Value: !Ref EfsSecurityGroup
  EfsBastionId:
    Description: Instance ID of the EFS Bastion Server
    Value: !Ref BastionServer
