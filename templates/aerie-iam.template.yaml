AWSTemplateFormatVersion: "2010-09-09"

Description: IAM Roles for the Aerie ECS Deployment

Parameters:
  ProjectName:
    Description: Name of your project
    Type: String
    Default: ammos-aerie
  PermissionsBoundaryArn:
    Description: Will be attached to all created IAM Roles to satisfy security requirements
    Type: String
    Default: ""
  RolePath:
    Description: Will be attached to all created IAM Roles to satisfy security requirements
    Type: String
    Default: ""

Conditions:
  RolePathProvided: !Not [!Equals ["", !Ref RolePath]]
  PermissionsBoundaryProvided: !Not [!Equals ["", !Ref PermissionsBoundaryArn]]

Resources:
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub IAM Role for ECS Task execution - ${ProjectName}
      Path: !If [RolePathProvided, !Ref RolePath, !Ref AWS::NoValue]
      PermissionsBoundary:
        !If [
          PermissionsBoundaryProvided,
          !Ref PermissionsBoundaryArn,
          !Ref AWS::NoValue,
        ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub IAM Role for ECS Task Runtime - ${ProjectName}
      Path: !If [RolePathProvided, !Ref RolePath, !Ref AWS::NoValue]
      PermissionsBoundary:
        !If [
          PermissionsBoundaryProvided,
          !Ref PermissionsBoundaryArn,
          !Ref AWS::NoValue,
        ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: EnableEcsExecSsmPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"
        - PolicyName: SecretsManagerReadAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
                Condition:
                  StringLikeIfExists:
                    secretsmanager:Name: "*AerieDb"
        # TODO: Lock down the fs and fsap resources if we move to creating the EFS resources *before* IAM
        - PolicyName: AerieFilesystemMountPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Condition:
                  StringEquals:
                    elasticfilesystem:AccessPointArn:
                      - !Sub "arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/*"
                Resource:
                  - !Sub "arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/*"
  LambdaEfsRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub IAM Role for Lambda execution - ${ProjectName}
      Path: !If [RolePathProvided, !Ref RolePath, !Ref AWS::NoValue]
      PermissionsBoundary:
        !If [
          PermissionsBoundaryProvided,
          !Ref PermissionsBoundaryArn,
          !Ref AWS::NoValue,
        ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonElasticFileSystemClientFullAccess"
      Policies:
        - PolicyName: AerieFilesystemMountPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Condition:
                  StringEquals:
                    elasticfilesystem:AccessPointArn:
                      - !Sub "arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/*"
                Resource:
                  - !Sub "arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/*"
  BastionHostRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BastionHostRole
      Path: !If [RolePathProvided, !Ref RolePath, !Ref AWS::NoValue]
      PermissionsBoundary:
        !If [
          PermissionsBoundaryProvided,
          !Ref PermissionsBoundaryArn,
          !Ref AWS::NoValue,
        ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
            Effect: Allow
      Policies:
        - PolicyName: BastionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Logging
                Action:
                  - "logs:CreateLogStream"
                  - "logs:GetLogEvents"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutRetentionPolicy"
                  - "logs:PutMetricFilter"
                  - "logs:CreateLogGroup"
                Resource: "*"
                Effect: Allow
              - Sid: DescribeAddress
                Action:
                  - "ec2:DescribeAddresses"
                Resource: "*"
                Effect: Allow
              - Sid: AssociateAddress
                Effect: Allow
                Action:
                  - "ec2:AssociateAddress"
                Resource: "*"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"

Outputs:
  ECSTaskExecutionRoleArn:
    Description: "Default Execution Role for ECS Tasks - uses managed policy for task execution"
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub "${ProjectName}-ECSTaskExecutionRoleArn"
  ECSTaskRoleArn:
    Description: "Default Task Role for ECS Tasks - uses managed policy for task execution"
    Value: !GetAtt EcsTaskRole.Arn
    Export:
      Name: !Sub "${ProjectName}-ECSTaskRoleArn"
  LambdaEfsRoleArn:
    Description: "Default Role for Lambda - uses managed policy for function execution"
    Value: !GetAtt LambdaEfsRole.Arn
    Export:
      Name: !Sub "${ProjectName}-LambdaEfsRoleArn"
  BastionRoleName:
    Description: "Name of the role created for EFS Bastion Server"
    Value: !Ref BastionHostRole
    Export:
      Name: !Sub "${ProjectName}-BastionRoleName"
